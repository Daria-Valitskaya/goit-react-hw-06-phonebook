{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/Filter/Filter.module.css","Components/Section/Section.module.css","redux/Contacts/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/Section/Section.js","App.js","redux/Contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","onDeleteContact","onChangeFilter","connect","dispatch","onAddContact","useState","setName","setNumber","handleInputChange","event","currentTarget","value","reset","onSubmit","preventDefault","className","s","input","type","onChange","pattern","title","required","ContactItem","deleteContact","onClick","state","contacts","allContacts","filter","normalizedFilter","toLocaleLowerCase","contact","includes","filteredVisibleContacts","items","map","label","Section","children","container","App","createReducer","actions","action","_","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","contactReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d3210069.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3x2D5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__MeU4T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1IdX2\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: { id: uuidv4(), name, number },\r\n// });\r\n\r\n// const onDeleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const onChangeFilter = (value) => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\nconst addContact = createAction(\"contacts/Add\", (name, number) => ({\r\n  payload: { id: uuidv4(), name, number },\r\n}));\r\nconst onDeleteContact = createAction(\"contacts/Delete\");\r\nconst onChangeFilter = createAction(\"contacts/Filter\");\r\nexport { addContact, onDeleteContact, onChangeFilter };\r\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../redux/Contacts/contacts-actions\";\nfunction ContactForm({ onAddContact }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = (event) => {\n    event.preventDefault();\n    onAddContact(name, number);\n    reset();\n  };\n  const reset = () => {\n    setNumber(\"\");\n    setName(\"\");\n  };\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAddContact: (name, number) => dispatch(addContact(name, number)),\n});\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\n\nconst ContactItem = ({ id, number, name, deleteContact }) => {\n  return (\n    <>\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport { onDeleteContact } from \"../../redux/Contacts/contacts-actions\";\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    {contacts.map(({ id, number, name }) => (\n      <li key={id} name={name}>\n        <ContactItem\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={deleteContact}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nconst filteredVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLocaleLowerCase();\n  return allContacts.filter((contact) =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n  const visibleContacts = filteredVisibleContacts(items, filter);\n  return { contacts: visibleContacts };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  deleteContact: (id) => dispatch(onDeleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { onChangeFilter } from \"../../redux/Contacts/contacts-actions\";\nimport s from \"./Filter.module.css\";\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n      ></input>\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onChangeFilter: (event) =>\n    dispatch(onChangeFilter(event.currentTarget.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from \"prop-types\";\nimport s from \"./Section.module.css\";\n\nexport default function Section({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import ContactForm from \"./Components/ContactForm/ContactForm\";\nimport ContactList from \"./Components/ContactList/ContactList\";\nimport Filter from \"./Components/Filter/Filter\";\nimport Section from \"./Components/Section/Section\";\n\nexport default function App() {\n  return (\n    <div>\n      <Section>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </Section>\n      <Section>\n        <h2>My Contacts </h2>\n        <Filter />\n      </Section>\n      <Section>\n        <ContactList />\n      </Section>\n    </div>\n  );\n}\n","import { combineReducers } from \"redux\";\r\n// import types from \"./contacts-types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as actions from \"./contacts-actions\";\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, action) => [...state, action.payload],\r\n  [actions.onDeleteContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\nconst filter = createReducer(\"\", {\r\n  [actions.onChangeFilter]: (_, action) => action.payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/Filter\":\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport contactReducers from \"./Contacts/contacts-reducer\";\r\nimport logger from \"redux-logger\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  combineReducers({ contacts: contactReducers })\r\n);\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\nexport { persistor, store };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { persistor, store } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}